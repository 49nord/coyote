#!/usr/bin/python3

# Copyright (c) 2017 49nord GmbH

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import logging
import os
import subprocess
import sys

import acme_tiny
import requests

# all files should only be readable by us by default
os.umask(0o077)

logging.basicConfig(level=logging.INFO)

log = logging.getLogger('coyote')
log.setLevel(logging.INFO)

WEBROOT = '/var/www/html/.well-known/acme-challenge'

# do not renew if valid for at least 30 more days
TIMEVALID = 60 * 60 * 24 * 30

for domain in sys.argv[1:]:
    account_key_fn = '/etc/coyote/{}.key'.format(domain)
    key_fn = '/etc/ssl/private/{}.pem'.format(domain)
    csr_fn = '/etc/coyote/{}.csr'.format(domain)
    cert_fn = '/etc/ssl/{}.crt'.format(domain)
    chain_fn = '/etc/ssl/{}.chain.crt'.format(domain)

    log.info('Renewing {}'.format(domain))
    log.info('Account key: {}'.format(account_key_fn))
    log.info('Certificate key: {}'.format(key_fn))
    log.info('Certificate signing request: {}'.format(csr_fn))
    log.info('Certificate file: {}'.format(cert_fn))

    # step 0: check if certificate exists and is valid for another TIMEVALID
    #         seconds
    if os.path.exists(cert_fn):
        rval = subprocess.call([
            'openssl', 'x509', '-checkend',
            str(TIMEVALID), '-noout', '-in', cert_fn
        ])

        if rval == 0:
            log.info('Certificate file {} is valid for at least another {} '
                     'seconds, not touching this.'.format(cert_fn, TIMEVALID))
            continue

    # step 1: generate rsa keys
    log.info('Generating account RSA key...')
    subprocess.check_call(
        ['openssl', 'genrsa', '-out', account_key_fn, '4096'])

    log.info('Generating certificate RSA key')
    subprocess.check_call(['openssl', 'genrsa', '-out', key_fn, '4096'])

    # step 2: generate csr
    log.info('Generating CSR')
    subprocess.check_call([
        'openssl', 'req', '-out', csr_fn, '-new', '-sha256', '-key', key_fn,
        '-subj', '/CN=' + domain
    ])

    # step 3: use acme-tiny to create new certificate
    os.umask(0o022)
    crt = acme_tiny.get_crt(account_key_fn, csr_fn, WEBROOT)
    os.umask(0o077)

    # step 4: download root certificate
    resp = requests.get(
        'https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt')
    resp.raise_for_status()
    ca_cert = resp.text

    # step 4: write out cert
    log.info('Saving certificate {}'.format(cert_fn))
    with open(cert_fn, 'w') as out:
        out.write(crt)

    log.info('Saving chain {}'.format(chain_fn))
    with open(chain_fn, 'w') as out:
        out.write(crt)
        out.write(ca_cert)

    # step 5: fix permissions for ssl certs
    log.info('Fixing permissions')
    subprocess.check_call(['chown', 'root:ssl-cert', key_fn])
    os.chmod(key_fn, mode=0o640)
    os.chmod(cert_fn, mode=0o644)
    os.chmod(chain_fn, mode=0o644)

    # step 6: reload nginx
    log.info('Reloading/restarting nginx')
    subprocess.check_call(['systemctl', 'reload-or-try-restart', 'nginx'])
